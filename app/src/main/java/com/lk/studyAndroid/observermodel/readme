/**应用场景*/
·当一个对象的改变需要通知其他对象改变时，且不知道具体有多少个对象有待改变时
·当一个对象必须通知其他对象，该对象又不能假定其他对象是谁的时候
·跨系统的消息交换场景（消息队列，事件总线的处理机制）


/**优点*/
·解除观察者与主题之间的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响到另一边的变化
·易于扩展，对同一主题新增观察者时无需修改原有代码

/**缺点*/
·依赖关系并未完全解除，抽象主题仍然依赖抽象观察者
·使用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在java中
消息的通知一般是顺序执行的，那么一个观察者卡顿会影响整体的执行效率，在这种情况下一般建议采取异步实现
·可能会引起多余的数据通知