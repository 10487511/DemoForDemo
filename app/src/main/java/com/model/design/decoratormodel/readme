/**名称*/
装饰者模式

/**定义*/
动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活

/**应用场景*/
·需要扩展一个类的功能，或给一个类增加附加功能时
·需要动态的给一个对象增加功能，这些功能可以再动态的撤销
·当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时

/**优点*/
·采用组合的方式，可以动态的扩展功能，同时也可以在运行时选择不同的装饰器，来实现不同的功能
·有效避免了使用继承的方式扩展对象功能而带来的灵活性差，子类无限制扩张的问题
·被装饰者与装饰者解偶，被装饰者可以不知道装饰者的存在，同时新增功能时原有代码也无需改变，符合开放封闭原则

/**缺点*/
·装饰层过多的话，维护起来比较困难
·如果要修改抽象组件这个基类的话，后面的一些子类可能也需跟着修改，较容易出错

/**源码分析*/
Activity、Service、Application这里面实际上就是通过装饰者模式来实现的

