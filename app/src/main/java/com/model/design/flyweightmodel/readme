/**名称*/
享元模式

/**定义*/
使用共享对象可有效地支持大量的细粒度的对象

/**应用场景*/
·系统存在大量相似或相同的对象
·外部状态相同类似情况下
·需要缓冲池时

/**优点*/
·大大减少了系统创建的对象，降低了程序内存的使用

/**缺点*/
·将对象分为内部状态和外部状态两部分，导致系统变复杂，逻辑也更复杂
·将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长

/**源码分析*/
Java中的String

