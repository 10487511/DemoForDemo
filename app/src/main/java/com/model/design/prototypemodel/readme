/**名称*/
原型模式

/**定义*/
用原型实例指定创建对象的种类，并通过拷贝原型创建新的对象

/**应用场景*/
·如果初始化一个类需要耗费较多的资源(数据、硬件)，可以使用原型拷贝来避免这些消耗
·通过new创建一个对象时如果需要非常繁琐的数据准备或者访问权限，可以使用原型模式
·一个对象需要提供给其他对象访问，并且各个调用者可能都需要修改其值时，可以拷贝多个对象供提供者使用(保护性拷贝)

/**优点*/
·可以解决复杂对象创建时消耗过多的问题，在某些场景下创建对象的效率
·保护性拷贝，可以防止外部调用者对对象的修改，保证这个对象是只读的

/**缺点*/
·拷贝对象时不会执行构造函数
·需要拷贝深拷贝和浅拷贝的问题

/**源码分析*/
Intent